 Cria um arquivo oculto .git
	C\> git init
Verifica o status do conteiner
C\> git status
Adiciona o script ao container
C:\> git add <nome do arquivo>.<extensao>
Comentar o script
C:\> git commit -m "comentario"
Depois identificar o comentario
$ git log --oneline --graph
Verificar com
	volta pra tras
	vai para frente
	apaga comentario
	divide linhas de execucao
	volta para o final
$ git checkout <hash que voce quer ver>

*************COMANDOS DO GITHUB***********
Entrar no Git Bash
# Clicando no ícone;
Saindo do Git Bash
~$ exit
Visualizar diretório corrente
~$ pwd
Entrar em um diretório
~$ cd "nome_do_diretório"
Saindo do Diretório para um nível acima
~$ cd[espaço]..
Listando todos os diretório correntes
~$ ls -l ou ls -la
Eu acho que roda cria um diretório
~$ mkdir
Apaga um diretório
~$ rm
Descreve a função do comando
~$ man <nome do comando git>
Limpar a tela
~$ clear 
Aumentando o tamanho da fonte
~$ [Ctrl]+movimento de roda do mouse.
Demonstra os diretório
~$ ls
Demonstra os diretório

============================================================
cont...COMANDOS BÁSICOS GIT (init status add commit log)
-------------------------------------------------------------
::::Criando um Repositório Local::::
#1) Crie um PastaProjeto e direcione o Git Bash até lá
Va' para o explorador do windows clique com o bota'o direito do
mouse e escolha Git Bash here. Ele abre o Git Bash direto no
direto'rio.
#2) Crie um diretório oculto .git dentro da diretório no PC
#3) 
~$ git init [Enter]
~$ Initialized empty Git repository in C:/path/PastaProjeto/.git
~$ ls [Enter]
Aparece os arquivos que subirão.
Se quiser ver diretório oculto .git faça
~$ ls -a
Se quiser ver o status do .git pasta repositório criado faça
~$ git status
On branch master
No commits yet (Algo como sem commit ainda)
nothinf to commit...
Criando dois arquivo dentro da pasta repositório
~$ touch a.txt b.txt
Verificando o status da pasta
~$ git status
On branch master
No commits yet
	a.txt
	b.txt
nothinf added to commit but untracked..
Adicionando os aquivos ao container
~$ git add a.txt
~4 git add b.txt
ou tudo de uma vez
~$ git add *
~$ git add .
~$ git status
On branch master
No commits yet
	a.txt
	b.txt
	agora verdes
Identificar o cotainer e armazenaar
~$ git commit -m "Criado os arquivos a.txt b.txt"
~$ ls
a.txt b.txt
~$ git status
On branch master
nothing to commit,....
~$ git log
commit aasdfafakjfhfiuhffuf (HEAD-> master)
Autor: Fabiano Pesoa <fabiano.pessoa30@gmail.com>
Date: set jan data
	Criado os arquivos a.txt b.txt
Criando um arquivo c.txt
~$ touch c.txt
~$ No meu caso eu teria que fazer
~$ vim a.txt
Digitar alguma alteração
Salvar :wq
Para o caso do VSCode
~$ code.
C:\> Entrando no windows e alterando o arquivo
~$ git status
O git identificará que houve uma alteração
~$ git add *
~$ git status
 Um arquivo foi alterado 
 outro foi criado
~$ git commit -m "modificado o arquivo a.txt e criado o c.txt"
~$ git status
Tudo ok
~$ git log
Descreve os cammits
Exibindo o log de uma forma melhor
~$ git log --oneline
===================================================================
cont.... COMANDO DO GITHUB
* Rastrear mudanças
* Desfazer alterações
* Recuperar versores anteriores do projeto
~$ git log
Mostra todos os cammits das alterações
Autor e data
~$ git log --oneline
Resumo dos hash do cammit
(HEAD -> master)
Ex.:commit d76491c criou o a.txt e b.txt
   :commit bc4836c alterou o a.txt e criou o c.txt
master o início
HEAD seguinte projeto. Sempre será o último cammit
Desenho do gráfico de commit
~$ git log --graph
Simplificando podemos fazer
~$ git log --oneline --graph
* d76491c (HEAD -> master) comentário
* bc4836c comentário
~$ 
================================================
******************GitHub***********************
-----------------------------------------------
#)-> Ferramenta de versionamento;
#)-> Ir para a pa'gina https://git-scm.com/downoads
#)-> Curso GIT e GITHUB - Instalando o GIT no Linux - Clonando repositórios do GITHUB
#)-> No terminal:
Verificar o direto'rio em /home/fabiano
:~$ pwd
Atualizando o reposito'rio
:~$ sudo apt-get update
Instala git
:~$ sudo apt-get install git
:~$ pwd
/home/fabiano
Verifica os direto'rio ocultos
:~$ ls -a
A're de trabalho....
.bash_history
.bash_logout
# configurac,o'es
:~$ git config --global user.name "FabianoPessoa"
:~$ git config --global user.email "fabiano.pessoa30@gmail.com"
# Verificando a criac,a'o do .gitconfig em ...
:~$ ls -a
# Verificando os para'metros de configurac,a'o do git
:~$ cat .gitconfig
[user]
	nome = 
	email =
#)-> Acessar: URL github.com
#)-> Logar:
#)-> [Start a projeto]
#)-> Owner: FabianoPessoa/<nome_do_repositorio>
#)-> Descricao: <Introducao ao Shell>
#)-> [v] Inicialize este repositorio com um readme
#)-> [Criar Repositorio]
#)-> Deslogar
#)-> Acesar https://github.com/fabianopessoa
#)-> Procure o repositorio que acabou de criar
#)-> [Clonar esse repositorio]
ou
#)-> Digite o link ^ acima no terminal
#)-> Retorne para o terminal
:~$ git clone https://github.com/fabianopessoa/<nome_do_repositorio>
:~$ ls
# Veja que ele criou o direto'rio <nome_do_repositorio>
:~$ cd <nome_do_repositorio>
REAME.md
:~$ git status
nothing to commit....
# Crie um arquivo em shell script
:~$ vi hello.sh
# Os comando de lote do linux sao .sh

==============================================================
Clonado um repositótio do site:
$ git clone <http:...>
Para subir faça:
$ git push
Obs.:
A partir de agora procure trabalhar em cima dos arquivos
da internet. Fac,a BackUp em computador frequente.
Obs: Se voce' na'o esta' trabalhando em um reposito'rio
que foi pushado do git e acabou de criar um reposito'rio
em seu PC fac,a:
#)-> Crie um reposito'rio no github:
	<nome_do_repositorio>
#)-> No terminal
$ git remote add origin https://github.com/FabianoPessoa
/<nome_do_repositorio>.git
#)-> Veja se tem uma mensagem de erro por causa
e reposito'rio ja' existente.
$ git branch -M main
$ git push -u origin main
#)-> Atualiza o reposito'rio criado dentro do git
pela primeira vez.

Em seguida fac,a como anteriormente: Clonando
reposito'rio do site. 
=====================================================
******* RASTREANDO E DESFAZENDO ALTERACOES **********
-----------------------------------------------------
Para alteracoes na'o armazenadas
$ git checkout <hash>
Volta para o u'ltimo hash porque na'o foi armazenado
Para alterac,o'es na'o armazenadas
$ git restore *
Limpara' todas as alterac,o'es dos arquivos
na'o adicionados ao container
********Para apagar verso'es armazenadas *******
$ git checkout <hash desejado>
Volta para a versao desejada
$ git checkout master
Volta a u'ltima versao do ramo
$ git bransh
Identifica qual ramo voce' esta'
master e' o ramo principal
$ git diff
Visualiza as mudancas feitas
Se  as alterac,o'es ja' foram feitas
e' adicionadas ao conteiner na'o podera'o
retornar com o $ git checkout <hash>
Fazer enta'o:
$ git reset HEAD 
Tira as alteracoes para fora do conteiner
$ git diff 
Funciona de novo
$ git checkout <hash>
Volta ao hash anteriormente feito.
**************** Para apagar um commit *************
$ git reset --hard <hash>
Volta ao hash e apaga todos os commit a frente

===========================================
****** CRIANDO RAMIFICAC,O'ES
-------------------------------------------
$ git bransh
* master
Identifica a ramificac,a'o
$ git log --oneline
Ve' as ramificac,o'es
Se voce quiser fazer alguma alterac,a'o nas
verso'es anteriores, devera' fazer uma ramificac,a'o:
$ git checkout -b <nomedaramificacao>
Cria a ramificacao
$ git log --oneline
Mostra a ramificacao criada
$ git bransh
  master
* ramocriado
Depois de fazer va'rias alterac,a'oes dentro do ramo
volte ao ramo master com...
$ git checkout master
Volta ao ultimo commit dentro do master
$ git branch
* master
  teste
Agora eu fac,o  alterac,o'es nos dois ramos
Perceba que os dois ramos te'm commits de alterac,o'es
Para visualizar os dois ramos...
$ git log --oneline --graph --all
Tirando o oneline
$ git log --graph --all
Precione q para sair
Fazendo a fusa'o dos ramos
$ git bransh
* master
  novoramo
Para fundir os ramos fac,a:
$ git merge novoramo
Sera' identificada os conflitos porque os dois ramos 
foram aterados
Para abortar o processo de funsa'o
$ git merge --abort
Para continuas com a funsa'o depois de resolvidos todos
os conflitos fac,a:
$ git add *
$ git commit -m "Fusa'o dos ramos e resoluc,a'o dos
conflitos"
Para a funsa'o dos ramos devem ser solucionados os conflitos
-----------------------------------------------------------
******* quando fiz um $ git push dentro do ramo criado*****
Ele soliciou
$ git push --set-upstream origin <ramo>
----------------------------------------------------------
************* Criar Ramo *********************
Retornar ao master
$ git checkout master
$ git branch
Verficar que esta' no master
$ git merge novoramo
Resolver conflitos
ou
$ git merge --abort


FIM DE COMANDOS DO GITHUB
